# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from osv import fields,osv
from datetime import date, datetime
import time
##########################################################################################################################################
##########################################################################################################################################
###########Herencias desde formacion_2015_nomima_consolidado##############################################################################
class for_pis_mae_consolidado_pagos_extended(osv.osv):
    """Registro de Detalles de los Reportes de misiona01 y misiona05"""
    _name ='for.pis.mae_consolidado_pagos'
    _inherit='for.pis.mae_consolidado_pagos'
    
    def create(self, cr, uid, vals, context=None):
        new_id = False
        get_consolidado_detalle = self.pool.get('for.pis.mae_consolidado_detalle')
        get_asistencias = self.pool.get('for.pis.mae_asistencias')
        get_consolidado = self.pool.get('for.pis.mae_consolidado')
        get_misiona01 = self.pool.get('for.pis.mae_misiona01')
        get_misiona05 = self.pool.get('for.pis.mae_misiona05')
        id_consolidado_detalle = get_consolidado_detalle.search(cr, uid, [('consolidado_id','=',vals['consolidado_id'])])
        if id_consolidado_detalle:
            new_id=super(for_pis_mae_consolidado_pagos_extended,self).create(cr, uid, vals)
            obj_usuario= self.pool.get('res.users').browse(cr, uid, uid)
            for i in id_consolidado_detalle:
                obj_consolidado_detalle= get_consolidado_detalle.browse(cr, uid, i)
                ########### Validacion cedula
                cedula = obj_consolidado_detalle.maestro_id.cedula
                cedula = cedula.replace('V','') 
                cedula = cedula.replace('-','') 
                cedula = cedula.replace('.','') 
                existe_misiona= get_misiona05.search(cr, uid, [('cedula','=',cedula),('detalle_pagos_id','=',new_id)])
                dict_misiona05={}
                if not existe_misiona:	                
                    dict_misiona01={}
###################################################################################################################################
###################### misiona01 v#################################################################################################
                    dict_misiona01['usuario'] = obj_usuario.name
                    dict_misiona01['detalle_pagos_id'] = new_id
                    dict_misiona01['tip_nom'] = vals['tipo_nomina']
                    dict_misiona01['ciu_nac'] = obj_consolidado_detalle.estado_id.estado
                    dict_misiona01['fec_nac'] = obj_consolidado_detalle.maestro_id.fecha_nacimiento
                    dict_misiona01['fec_ing'] = vals['fecha_inicio']
                    dict_misiona01['cod_car'] = '1'
                    dict_misiona01['cod_mun'] = '99'
                    dict_misiona01['cod_par'] = '99'
                    dict_misiona01['situacion'] = 'A'
                    dict_misiona01['fec_sta'] = vals['fecha_inicio']
                    dict_misiona01['for_pag'] = 'D'
                    dict_misiona01['cod_age'] = None
                    dict_misiona01['fec_usu'] = date.today().strftime('%Y-%m-%d')
                    dict_misiona01['hor_usu'] = time.strftime("%H:%M:%S")
                    dict_misiona01['cor_amo'] = 0
                    dict_misiona01['cedula'] = cedula                  
                     #######validacion nacionalidad
                    if obj_consolidado_detalle.maestro_id.nacionalidad.codigo == 'VEN':
                        dict_misiona01['nac'] = 'V'
                    else:
                        dict_misiona01['nac'] = 'E'
                    
                    ########### validacion nombre
                    nombre = obj_consolidado_detalle.maestro_id.nombres + ' ' + obj_consolidado_detalle.maestro_id.apellidos
                    nombre = nombre.upper()
                    #nombre = nombre.replace('Á','A')
                    #nombre = nombre.replace('É','E')
                    #nombre = nombre.replace('Í','I')
                    #nombre = nombre.replace('Ó','O')
                    #nombre = nombre.replace('Ú','U')
                    #nombre = nombre.replace('Ñ','N')                
                    dict_misiona01['nombre'] = nombre
                    ############validacion sexo
                    if obj_consolidado_detalle.maestro_id.genero_id.genero == 'Masculino':
                        dict_misiona01['sexo'] = 'F'
                    elif obj_consolidado_detalle.maestro_id.genero_id.genero == 'Femenino':
                        dict_misiona01['sexo'] = 'M'
                    ######### Validacion codigo del cargo
                    if obj_consolidado_detalle.estado_id.estado == 'Amazonas':
                        dict_misiona01['cod_dep'] = '620000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Anzoátegui':
                        dict_misiona01['cod_dep'] = '420000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Apure':
                        dict_misiona01['cod_dep'] = '430000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Aragua':
                        dict_misiona01['cod_dep'] = '440000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Barinas':
                        dict_misiona01['cod_dep'] = '450000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Bolívar':
                        dict_misiona01['cod_dep'] = '460000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Carabobo':
                        dict_misiona01['cod_dep'] = '470000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Cojedes':
                        dict_misiona01['cod_dep'] = '480000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Delta Amacuro':
                        dict_misiona01['cod_dep'] = '630000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Distrito Capital':
                        dict_misiona01['cod_dep'] = '410000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Falcón':
                        dict_misiona01['cod_dep'] = '490000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Guárico':
                        dict_misiona01['cod_dep'] = '500000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Lara':
                        dict_misiona01['cod_dep'] = '510000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Mérida':
                        dict_misiona01['cod_dep'] = '520000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Miranda':
                        dict_misiona01['cod_dep'] = '530000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Monagas':
                        dict_misiona01['cod_dep'] = '540000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Nueva Esparta':
                        dict_misiona01['cod_dep'] = '550000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Portuguesa':
                        dict_misiona01['cod_dep'] = '560000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Sucre':
                        dict_misiona01['cod_dep'] = '570000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Táchira':
                        dict_misiona01['cod_dep'] = '580000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Trujillo':
                        dict_misiona01['cod_dep'] = '590000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Vargas':
                        dict_misiona01['cod_dep'] = '640000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Yaracuy':
                        dict_misiona01['cod_dep'] = '600000211'
                    elif obj_consolidado_detalle.estado_id.estado == 'Zulia':
                        dict_misiona01['cod_dep'] = '610000211'    
                    #validacion codigo de estado    
                    if obj_consolidado_detalle.estado_id.estado == 'Amazonas':
                        dict_misiona01['cod_edo'] = '3'
                    elif obj_consolidado_detalle.estado_id.estado == 'Anzoátegui':
                        dict_misiona01['cod_edo'] = '2'
                    elif obj_consolidado_detalle.estado_id.estado == 'Apure':
                        dict_misiona01['cod_edo'] = '4'
                    elif obj_consolidado_detalle.estado_id.estado == 'Aragua':
                        dict_misiona01['cod_edo'] = '5'
                    elif obj_consolidado_detalle.estado_id.estado == 'Barinas':
                        dict_misiona01['cod_edo'] = '6'
                    elif obj_consolidado_detalle.estado_id.estado == 'Bolívar':
                        dict_misiona01['cod_edo'] = '7'
                    elif obj_consolidado_detalle.estado_id.estado == 'Carabobo':
                        dict_misiona01['cod_edo'] = '8'
                    elif obj_consolidado_detalle.estado_id.estado == 'Cojedes':
                        dict_misiona01['cod_edo'] = '10'
                    elif obj_consolidado_detalle.estado_id.estado == 'Delta Amacuro':
                        dict_misiona01['cod_edo'] = '11'
                    elif obj_consolidado_detalle.estado_id.estado == 'Distrito Capital':
                        dict_misiona01['cod_edo'] = '9'
                    elif obj_consolidado_detalle.estado_id.estado == 'Falcón':
                        dict_misiona01['cod_edo'] = '12'
                    elif obj_consolidado_detalle.estado_id.estado == 'Guárico':
                        dict_misiona01['cod_edo'] = '13'
                    elif obj_consolidado_detalle.estado_id.estado == 'Lara':
                        dict_misiona01['cod_edo'] = '14'
                    elif obj_consolidado_detalle.estado_id.estado == 'Mérida':
                        dict_misiona01['cod_edo'] = '15'
                    elif obj_consolidado_detalle.estado_id.estado == 'Miranda':
                        dict_misiona01['cod_edo'] = '16'
                    elif obj_consolidado_detalle.estado_id.estado == 'Monagas':
                        dict_misiona01['cod_edo'] = '17'
                    elif obj_consolidado_detalle.estado_id.estado == 'Nueva Esparta':
                        dict_misiona01['cod_edo'] = '18'
                    elif obj_consolidado_detalle.estado_id.estado == 'Portuguesa':
                        dict_misiona01['cod_edo'] = '19'
                    elif obj_consolidado_detalle.estado_id.estado == 'Sucre':
                        dict_misiona01['cod_edo'] = '20'
                    elif obj_consolidado_detalle.estado_id.estado == 'Táchira':
                        dict_misiona01['cod_edo'] = '21'
                    elif obj_consolidado_detalle.estado_id.estado == 'Trujillo':
                        dict_misiona01['cod_edo'] = '22'
                    elif obj_consolidado_detalle.estado_id.estado == 'Vargas':
                        dict_misiona01['cod_edo'] = '24'
                    elif obj_consolidado_detalle.estado_id.estado == 'Yaracuy':
                        dict_misiona01['cod_edo'] = '23'
                    elif obj_consolidado_detalle.estado_id.estado == 'Zulia':
                        dict_misiona01['cod_edo'] = '25'                    
                    #validacion tipo de cuenta
                    if obj_consolidado_detalle.maestro_id.tipo_cuenta_id.codigo == 'COR':
                        dict_misiona01['tip_cta'] = 'C'
                    elif obj_consolidado_detalle.maestro_id.tipo_cuenta_id.codigo == 'AHO':
                        dict_misiona01['tip_cta'] = 'A'
                    #validacion numero de cuenta
                    if obj_consolidado_detalle.maestro_id.entidad_id.codigo == 'PRO':
                        numero_cuenta = obj_consolidado_detalle.maestro_id.cuenta_id
                        dict_misiona01['num_cta'] = numero_cuenta[-16:]
                    else:
                        dict_misiona01['num_cta'] = obj_consolidado_detalle.maestro_id.cuenta_id
                    #validacion codigode banco
                    if obj_consolidado_detalle.maestro_id.entidad_id.codigo == 'BAN':
                        dict_misiona01['cod_bco'] = 1
                    if obj_consolidado_detalle.maestro_id.entidad_id.codigo == 'PRO':
                        dict_misiona01['cod_bco'] = 9
                    if obj_consolidado_detalle.maestro_id.entidad_id.codigo == 'VEN':
                        dict_misiona01['cod_bco'] = 2
                    
                    ###### misiona05
                    dict_misiona05['detalle_pagos_id'] = new_id
                    dict_misiona05['tip_nom'] = vals['tipo_nomina']
                    dict_misiona05['cedula'] = cedula
                    dict_misiona05['tip_mov'] = 1
                    dict_misiona05['cod_mov'] = vals['codigo']
                    dict_misiona05['cri_mov'] = 0
                    dict_misiona05['fec_ini'] = vals['fecha_inicio']
                    dict_misiona05['fec_fin'] = vals['fecha_inicio']
                    dict_misiona05['fec_retro'] = None
                    dict_misiona05['sal_ini'] = 0
                    dict_misiona05['mon_mov'] = 0 + obj_consolidado_detalle.monto_pago
                    dict_misiona05['apo_pat'] = 0
                    dict_misiona05['sal_mov'] = obj_consolidado_detalle.valor_hora
                    dict_misiona05['sal_ant'] = 0 + obj_consolidado_detalle.total_horas
                    dict_misiona05['stat_05'] = 1
                    dict_misiona05['usuario'] = obj_usuario.name
                    dict_misiona05['fec_usu'] = date.today().strftime('%Y-%m-%d')
                    dict_misiona05['hor_usu'] = time.strftime("%H:%M:%S")
                    get_misiona01.create(cr,uid, dict_misiona01)
                    get_misiona05.create(cr,uid, dict_misiona05)
                else:
                    obj_existe_misiona= get_misiona05.browse(cr, uid, existe_misiona)
                    dict_misiona05['mon_mov'] =obj_consolidado_detalle.monto_pago + obj_existe_misiona[0].mon_mov
                    dict_misiona05['sal_ant'] =obj_consolidado_detalle.total_horas + obj_existe_misiona[0].sal_ant
                    get_misiona05.write(cr,uid, existe_misiona, dict_misiona05)

                asistencias_detalle= get_asistencias.search(cr, uid, [('detalle_consolidado_id','=', obj_consolidado_detalle.id)])
                for asistencia in asistencias_detalle:
                    dict_state={'state': 'pagado'}
                    actualiza= get_asistencias.write(cr, uid, asistencia, dict_state, context)


        return new_id

for_pis_mae_consolidado_pagos_extended()

class for_pis_mae_consolidado_extended(osv.osv):
    """Registro de Detalles de los Reportes Consolidados de Asistencia y Pago de Facilitadores"""
    _name = 'for.pis.mae_consolidado'
    _inherit = 'for.pis.mae_consolidado'
    

    def create(self, cr, uid, vals, context=None):
        # Se instancian las clases que se usaran a lo largo de la funcion        
        get_maestros = self.pool.get('for.pis.maestros')
        get_asistencias = self.pool.get('for.pis.mae_asistencias')
        get_consolidado_detalle=self.pool.get('for.pis.mae_consolidado_detalle')
        # Se buscan los facilitadores que cobran por hora y luego sus asistencias que correspondan al rango de fecha indicada
        id_por_hora=self.pool.get('for.pis.condiciones_laborales').search(cr, uid, [('codigo','=', 'CTC')])
        id_maestros=get_maestros.search(cr, uid, [('condicion_laboral', '=',id_por_hora)])
        id_asistencias = get_asistencias.search(cr, uid, ['&', ('maestro_id','in',id_maestros),('calendario_id','>=',vals['semana_desde_id']), ('calendario_id','<=',vals['semana_hasta_id']), ('state','=','no pagado')])
        # Se crea el registro del consolidado y se almacena su id        
        new_id = super(for_pis_mae_consolidado_extended, self).create(cr, uid, vals)
        # Se confirma si existe alguna asistencia con los parametros definidor anteriormente
        if id_asistencias:
            # De cada asistencia encontrada se obtienen sus registros en forma de objeto para poder accesar a cada una de sus relaciones
            for i in id_asistencias:
                obj_asistencia = get_asistencias.browse(cr, uid, i, context)
                # Se suman las horas de la asistencia
                horas_asis= obj_asistencia.horas_lunes+obj_asistencia.horas_martes+obj_asistencia.horas_miercoles+obj_asistencia.horas_jueves+obj_asistencia.horas_viernes+obj_asistencia.horas_sabado
                #validar que la semana no tenga mas de 25 horas
                if horas_asis>25:
                    continue

                #validar si el formador tiene valor horas registrado
                if not obj_asistencia.maestro_id.nivel_id or len(obj_asistencia.maestro_id.cuenta_id) != 20 or not obj_asistencia.maestro_id.entidad_id or not obj_asistencia.maestro_id.tipo_cuenta_id or obj_asistencia.maestro_id.cedula == 'null' or obj_asistencia.maestro_id.cedula == 0:
                    continue
                ##validar si el formador tiene mas de las horas estamadas a pagar en el consolidado
                horas_maestro=horas_asis
                consolidados_detalle_maestro= get_consolidado_detalle.search(cr, uid, ['&',('consolidado_id','=',new_id),('maestro_id', '=', obj_asistencia.maestro_id.id)])
                for id_consolidado_maestro in consolidados_detalle_maestro:
                    obj_consolidados_detalle_maestro=get_consolidado_detalle.browse(cr, uid, id_consolidado_maestro)
                    horas_maestro += obj_consolidados_detalle_maestro.total_horas
                if horas_maestro > vals['limite_horas']:
                    rechazar=get_asistencias.write(cr, uid, i, {'state': 'rechazado'})
                    continue
                # Validar si está creado el detalle de consolidado para el consolidado actual y que pertenezcan a un mismo formador en una misma formacion
                existe_consolidado_detalle= get_consolidado_detalle.search(cr, uid, ['&',('consolidado_id','=',new_id),('maestro_id', '=', obj_asistencia.maestro_id.id),('pis_id','=',obj_asistencia.numero_id.id)])
                # Si existe: 1) se actualiza los campos de total_horas y monto_pago, 2) se relaciona la asistencia al detalle_consolidado existente
                if existe_consolidado_detalle:
                    #1) se actualiza los campos de total_horas y monto_pago
                    load = {}
                    obj_consolidado_detalle = get_consolidado_detalle.browse(cr, uid, existe_consolidado_detalle[0])
                    total_horas_nueva= obj_consolidado_detalle.total_horas + horas_asis
                    load['total_horas']= total_horas_nueva
                    load['monto_pago']= total_horas_nueva*obj_asistencia.maestro_id.nivel_id.valor_hora
                    get_consolidado_detalle.write(cr, uid, existe_consolidado_detalle[0], load)
                    #2) se relaciona la asistencia al detalle_consolidado existente
                    load= {}
                    load['detalle_consolidado_id']=existe_consolidado_detalle[0]
                    get_asistencias.write(cr, uid, i, load)
                # Si no existe: 1) llenan todos los campos del consolidado_detalle nuevo, 2) se relaciona la asistencia al consolidado generado
                else:
                    #1)llenar todos los campos del consolidado_detalle nuevo
                    load = {}
                    load['consolidado_id']= new_id
                    load['estado_id']= obj_asistencia.maestro_id.estado_id.id
                    load['maestro_id']= obj_asistencia.maestro_id.id
                    load['cedula']= obj_asistencia.maestro_id.cedula
                    load['nombres']= obj_asistencia.maestro_id.nombres
                    load['apellidos']= obj_asistencia.maestro_id.apellidos
                    load['cuenta_tipo']= obj_asistencia.maestro_id.tipo_cuenta_id.tipo_cuenta
                    load['cuenta_numero']= obj_asistencia.maestro_id.cuenta_id
                    load['entidad_bancaria']= obj_asistencia.maestro_id.entidad_id.entidad_bancaria
                    load['valor_hora']= obj_asistencia.maestro_id.nivel_id.valor_hora
                    load['cfs_id']= obj_asistencia.numero_id.cfs_id.id
                    load['pis_id']= obj_asistencia.numero_id.id
                    load['pis_nombre']= obj_asistencia.numero_id.denominacion_pis_id.denominacion
                    load['desde']= self.pool.get('for.pis.calendario').browse(cr, uid , vals['semana_desde_id']).inicio_semana
                    load['hasta']= self.pool.get('for.pis.calendario').browse(cr, uid , vals['semana_hasta_id']).final_semana
                    load['total_horas']= horas_asis
                    load['monto_pago']= horas_asis*obj_asistencia.maestro_id.nivel_id.valor_hora
                    load['activo']= True
                    id_consolidado_detalle= get_consolidado_detalle.create(cr, uid, load)
                    #2)se relaciona la asistencia al consolidado generado
                    load= {}
                    load['detalle_consolidado_id']=id_consolidado_detalle
                    get_asistencias.write(cr, uid, i, load)
        return new_id

    def unlink(self, cr, uid, ids, context=None):
        validar=self.pool.get('for.pis.mae_consolidado_pagos').search(cr,uid, [('consolidado_id', '=', ids)])
        if validar:
            raise osv.except_osv(('Prohibido eliminar'), ('No es posible eliminar el registro, Existe un pago asociado.'))
        else:
        	return super(for_pis_mae_consolidado_extended, self).unlink(cr, uid, ids, context)

for_pis_mae_consolidado_extended()


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################

