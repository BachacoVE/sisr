# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from osv import fields,osv

class for_pis_mae_liquidaciones(osv.osv):
    """Módulo de liquidación de Facilitadores"""
    _name = 'for.pis.mae_liquidaciones'
    #_rec_name = 'maestro_id'
    _rec_name = 'cedula'
    #_rec_name = 'nombres'
    #_rec_name = 'apellidos'
    
    _columns = {
        'maestro_id': fields.many2one('for.pis.maestros', 'Facilitador', required=True, help='Código del Facilitador'),
        'cedula': fields.related('maestro_id', 'cedula', type='char', relation='for.pis.maestros', string='Cedula', store=False, help='Cédula del Facilitador'),
        'nombres': fields.related('maestro_id', 'nombres', type='char', relation='for.pis.maestros', string='1er y 2do Nombre', store=False, help='Nombres del Facilitador'),
        'apellidos': fields.related('maestro_id', 'apellidos', type='char', relation='for.pis.maestros', string='1er y 2do Apellido', store=False, help='Apellidos del Facilitador'),
        'fecha_inicio': fields.date('Fecha Inicio', help='Fecha de Inicio de periodo de trabajo'),
        'fecha_fin': fields.date('Fecha Fin', help='Fecha de finalización de periodo de trabajo'),
        'antiguedad_dias': fields.integer('Antiguedad Dias', help='Antiguedad del Facilitador expresada en dias'),
        'antiguedad_meses': fields.integer('Antiguedad Meses', help='Antiguedad del Facilitador expresada en meses'),
        'antiguedad_annios': fields.integer('Antiguedad Años', help='Antiguedad del Facilitador expresada en años'),
        'pis_participa': fields.text('Formación donde participó', help='Nombre de la Formación en el cual participa el Facilitador'),
        'valor_hora': fields.float('Valor Hora', help='Valor de pago de la Hora del Facilitador según el Nivel'),
        'ultimo_salario': fields.float('Ultimo Salario', help='Ultimo salario del Facilitador'),
        'total_horas': fields.integer('Total Horas', help='Total de Horas Trabajadas por el Facilitador en el período de tiempo especificado'),
        'cargo': fields.char('Cargo', size=100, readonly=True, help='(Cargo por defecto: Facilitador Pueblo)'),
        'dependencia_id': fields.many2one('for.dependencias', 'Dependencia', required=False, help='Dependencia INCES'),
        'estado_id': fields.many2one('for.pis.estados', 'Código Estado', help='Código del Estado donde trabaja el Facilitador'),
        'estado': fields.related('estado_id', 'estado', type='char', relation='for.pis.estados', string='Estado', store=False, help='Estado donde trabaja el Facilitador'),
        'motivo_egreso_id': fields.many2one('for.pis.mae_motivos_egreso', 'Codigo Motivo Egreso', help='Código del Motivo de Egreso del Facilitador'),
        'motivo_egreso': fields.related('motivo_egreso_id', 'motivo_egreso', type='char', relation='for.pis.mae_motivos_egreso', string='Motivo de Egreso', store=False, help='Motivo de Egreso del Facilitador'),
        'modalidad_id': fields.many2one('for.pis.mae_modalidades_liquidacion', 'Modalidad de Liquidación', required=True, help='Modalidad de Liquidación'),
        'pres_total_dias_pagar': fields.integer('Total días a Pagar', readonly=True, help='Total de dias a pagar prestaciones'),
        'pres_sueldo_integral_mens': fields.float('Sueldo Integral Mensual', readonly=True, help='Sueldo integral mensual para calculo prestaciones'),
        'pres_sueldo_integral_diario': fields.float('Sueldo Integral Diario', readonly=True, help='Sueldo integral diario para calculo prestaciones'),
        'pres_monto_a_pagar': fields.float('Monto a Pagar', readonly=True, help='Monto a pagar prestaciones'),
        'asig_tope_horas': fields.integer('Tope Horas', readonly=True, help='Máximo horas a trabajar para obtener el monto total del beneficio Incentivo al ahorro'),
        'asig_monto': fields.float('Monto', readonly=True, help='Monto total de la asignacion no fraccionada (Bs. Máximo Incentivo al ahorro)'),
        'asig_cantidad_horas': fields.integer('Cantidad Horas', readonly=True, help='Total horas trabajadas por el Facilitador '),
        'asig_monto_a_pagar': fields.float('Monto a Pagar', readonly=True, help='Monto total a cancelar al Facilitador por el beneficio Incentivo al ahorro'),
        'ded_concepto': fields.char('Concepto de Deducción', size=200, help='Nombre de la Deducción'),
        'ded_monto_a_deducir': fields.float('Monto a Deducir', readonly=True, help='Monto a deducir '),
        'bas_salario_mensual': fields.float('Salario Mensual', readonly=True, help='Salario Básico Mensual'),
        'bas_salario_anual': fields.float('Salario Anual', readonly=True, help='Salario Básico Anual'),
        'bas_salario_diario': fields.float('Salario Diario', readonly=True, help='Salario Básico Diario'),
        'bas_salario_int_diario_pres': fields.float('Salario Integral Diario (Prestaciones)', readonly=True, help='Salario Integral diario (prestaciones )'),
        'bas_salario_int_bv': fields.float('Salario Integral Diario (Bono Vacacional)', readonly=True, help='Salario Integral (bono vacacional/bonif. fin de año)'),
        'bas_salario_int_bfa': fields.float('Salario Integral Diario (Aguinaldos)', readonly=True, help='Salario Integral BFA (Aguinaldos)'),
        'bas_bono_vacacional': fields.float('Bono Vacacional', readonly=True, help='Bono Vacacional'),
        'bas_bonificacion_fin': fields.float('Bonificación Fin Año', readonly=True, help='Bonificación Fin de Año'),
        'bas_alicuota_aguinaldo': fields.float('Alícuota Diaria BFA (Dozavo)', readonly=True, help='Alicuota de bonificación fin de año (Dozavo)'),
        'bas_alicuota_bono_vac': fields.float('Alícuota Diaria BV (Dozavo)', readonly=True, help='Alicuota de bono vacacional (Dozavo)'),
        'vfr_dias_a_pagar': fields.float('Dias a Pagar', readonly=True, help='Dias a pagar por Vacaciones Fraccionadas'),
        'vfr_meses': fields.integer('Meses a Pagar', readonly=True, help='Meses a pagar por Vacaciones Fraccionadas'),
        'vfr_total_dias_pagar': fields.float('Total Dias a Pagar', readonly=True, help='Total dias a pagar por Vacaciones Fraccionadas según meses de Antigüedad'),
        'vfr_sueldo_mensual': fields.float('Salario Mensual', readonly=True, help='Sueldo Mensual para calculo de Vacaciones Fraccionadas'),
        'vfr_salario_diario': fields.float('Salario Diario', readonly=True, help='Salario diario para calculo de Vacaciones Fraccionadas'),
        'vfr_monto_a_pagar': fields.float('Monto a Pagar', readonly=True, help='Monto total a pagar por Vacaciones Fraccionadas'),
        'bvf_dias_a_pagar': fields.float('Días a Pagar', readonly=True, help='Dias a pagar por Bono Vacacional Fraccionado'),
        'bvf_meses': fields.integer('Meses a Pagar', readonly=True, help='Meses a pagar por Bono Vacacional Fraccionado'),
        'bvf_total_dias_pagar': fields.float('Total Dias a Pagar', readonly=True, help='Total dias a pagar por Bono Vacacional Fraccionado'),
        'bvf_salario_mensual': fields.float('Salario Mensual', readonly=True, help='Salario mensual para calculo de Bono Vacacional Fraccionado'),
        'bvf_salario_diario': fields.float('Salario Diario', readonly=True, help='Salario diario para calculo de Bono Vacacional Fraccionado'),
        'bvf_monto_a_pagar': fields.float('Monto a Pagar', readonly=True, help='Monto a pagar por Bono Vacacional Fraccionado'),
        'bfaf_dias_a_pagar': fields.float('Días a Pagar', readonly=True, help='Dias a pagar por Bonificacion Fin de año Fraccionado'),
        'bfaf_meses': fields.integer('Meses a Pagar', readonly=True, help='Meses a pagar por Bonificacion Fin de año Fraccionado'),
        'bfaf_total_dias_a_pagar': fields.float('Total Dias a Pagar', readonly=True, help='Total dias a pagar pagar por Bonificacion Fin de año Fraccionado'),
        'bfaf_salario_mensual': fields.float('Salario Mensual', readonly=True, help='Total salario mensual para el calculo de la Bonificacion Fin de año Fraccionado'),
        'bfaf_salario_diario': fields.float('Salario Diario', readonly=True, help='Salario diario para el cálculo de la Bonificacion Fin de año Fraccionado'),
        'bfaf_monto_a_pagar': fields.float('Monto a Pagar', readonly=True, help='Total monto a pagar por Bonificacion Fin de año Fraccionado'),
        'total_asignaciones_legales': fields.float('Total Asignaciones Legales', readonly=True, help='Total monto a pagar por asignaciones legales'),
        'total_otras_asignaciones': fields.float('Total Otras Asignaciones', readonly=True, help='Total monto a pagar por Otras Asignaciones'),
        'total_deducciones': fields.float('Total deducciones', readonly=True, help='Total deducciones'),
        'total_liquidacion': fields.float('Total Liquidación', readonly=True, help='Total Liquidación'),
# campos nuevos, intereses, otras asignaciones, otras deducciones, total asignaciones

        'ipre_tasa_interes_id': fields.many2one('for.pis.mae_tasas_bcv_prestaciones','Tasa de Interes Prestaciones', readonly=True, help='Tasa de Interes Prestaciones'),
	'ipre_mes_tasa': fields.integer('Mes para cálculo de Intereses', readonly=True, help='Mes cálculo de Intereses sobre Prestaciones'),
	'ipre_dias_calculos': fields.integer('Días para cálculo de Intereses', readonly=True, help='Días cálculo de Intereses sobre Prestaciones'),
        'ipre_monto_interes': fields.float('Interes sobre Prestaciones', readonly=True, help='Intereses sobre Prestaciones'),
        'total_pres_mas_interes': fields.float('Total Interes mas Prestaciones', readonly=True, help='Total Intereses mas Prestaciones'), 
        'asig_concepto1': fields.many2one('for.pis.mae_tipos_asignaciones','Concepto de Asignación 1', help='Concepto de Asignación 1'),
        'asig_monto_de_asignacion1': fields.float('Monto de Asignación 1', help='Monto de Asignación 1'),
	'asig_concepto2': fields.many2one('for.pis.mae_tipos_asignaciones', 'Concepto de Asignación 2', help='Concepto de Asignación 2'),
        'asig_monto_de_asignacion2': fields.float('Monto de Asignación 2', help='Monto de Asignación 2'),
        'asig_concepto3': fields.many2one('for.pis.mae_tipos_asignaciones','Concepto de Asignación 3', help='Concepto de Asignación 3'),
        'asig_monto_de_asignacion3': fields.float('Monto de Asignación 3', help='Monto de Asignación 3'),
        'ded_concepto1': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 1', help='Concepto de Deducción 1'),
        'ded_monto_a_deducir1': fields.float('Monto a deducir1', help='Monto a Deducir 1'),
	'ded_concepto2': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 2', help='Concepto de Deducción 2'),
        'ded_monto_a_deducir2': fields.float('Monto a deducir2', help='Monto a Deducir 2'),
	'ded_concepto3': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 3', help='Concepto de Deducción 3'),
        'ded_monto_a_deducir3': fields.float('Monto a deducir2', help='Monto a Deducir 3'),
        'total_asignaciones': fields.float('Total Asignaciones', help='Total monto a pagar por Asignaciones'),
    }
    _sql_constraints = [('unique_maestro_id', 'unique(maestro_id)', 'No puede generar 2 o mas Liquidaciones para un Facilitador'),]
    
    def onchange_dependencia(self, cr, uid, ids, maestro):
        dep_maestro= self.pool.get('for.pis.maestros').browse(cr, uid, maestro).dependencia_ids[0].id
        return {'value':{'dependencia_id': dep_maestro}}

    def init(self, cr):
        # Ejecuta sentencias SQL para agregar las Funciones de Cálculo de la Liquidación
        cr.execute("""
-- Function: rrhh_liq_mae_alicuota_diaria_bonificacion_fin_annio(double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_alicuota_diaria_bonificacion_fin_annio(double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_alicuota_diaria_bonificacion_fin_annio(salario_mensual double precision, bono_vacacional_mensual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE alicuota_diaria_bonificacion_fin_annio DOUBLE PRECISION;
        BEGIN
		-- (ultimo salario + bono vacacional mensual) / 30 * 140 / 12 / 30
		alicuota_diaria_bonificacion_fin_annio = (salario_mensual + bono_vacacional_mensual) / 30 * 140 / 12 / 30;
		RETURN alicuota_diaria_bonificacion_fin_annio;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_alicuota_diaria_bonificacion_fin_annio(double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_alicuota_diaria_bono_vacacional(double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_alicuota_diaria_bono_vacacional(double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_alicuota_diaria_bono_vacacional(salario_mensual double precision, bonificacion_fin_annio_mensual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE alicuota_diaria_bono_vacacional DOUBLE PRECISION;
        BEGIN
		-- (ultimo salario + bono fin annio mensual) / 30 * 85 / 12 / 30

		alicuota_diaria_bono_vacacional = (salario_mensual + bonificacion_fin_annio_mensual )/ 30 * 85 / 12 / 30;
		RETURN alicuota_diaria_bono_vacacional;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_alicuota_diaria_bono_vacacional(double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_antiguedad_annios(integer, integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_antiguedad_annios(integer, integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_antiguedad_annios(maestro integer, modalidad integer, fecha_fin date, fecha_inicio date)
  RETURNS integer AS
$BODY$
	DECLARE total_horas INTEGER;
	DECLARE antiguedad_annios INTEGER;
	
        BEGIN
		SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)+sum(a.horas_sabado)+sum(a.horas_domingo) INTO  total_horas
                FROM for_pis_mae_asistencias a
                WHERE a.maestro_id = maestro
			AND a.semana_desde >= (fecha_inicio - time '24:00')
			AND a.semana_hasta <= (fecha_fin + time '24:00');
		
                IF modalidad = 3 THEN
			RETURN EXTRACT(YEAR FROM AGE(fecha_fin , fecha_inicio));
		ELSE
			-- Calculo de Annios desde las Horas (horas/8/30/12)
			RETURN (total_horas/8/30/12)::integer;

		END IF;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_antiguedad_annios(integer, integer, date, date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_antiguedad_dias(integer, integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_antiguedad_dias(integer, integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_antiguedad_dias(maestro integer, modalidad integer, fecha_fin date, fecha_inicio date)
  RETURNS integer AS
$BODY$
	DECLARE total_horas INTEGER;
	DECLARE antiguedad_annios INTEGER;
	
        BEGIN
		SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)+sum(a.horas_sabado)+sum(a.horas_domingo) INTO  total_horas
                FROM for_pis_mae_asistencias a
                WHERE a.maestro_id = maestro
			AND a.semana_desde >= (fecha_inicio - time '24:00')
			AND a.semana_hasta <= (fecha_fin + time '24:00');

                IF modalidad = 3 THEN
			RETURN EXTRACT(DAY FROM AGE(fecha_fin , fecha_inicio));
		ELSE
			-- Calculo de Dias desde las Horas (horas/8)
			RETURN (total_horas/8)::integer;
		END IF;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_antiguedad_dias(integer, integer, date, date)
  OWNER TO openerp;
  

-- Function: rrhh_liq_mae_antiguedad_meses(integer, integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_antiguedad_meses(integer, integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_antiguedad_meses(maestro integer, modalidad integer, fecha_fin date, fecha_inicio date)
  RETURNS integer AS
$BODY$
	DECLARE total_horas INTEGER;
	DECLARE antiguedad_meses INTEGER;
	
        BEGIN
		SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)+sum(a.horas_sabado)+sum(a.horas_domingo) INTO  total_horas
                FROM for_pis_mae_asistencias a
                WHERE a.maestro_id = maestro
			AND a.semana_desde >= (fecha_inicio - time '24:00')
			AND a.semana_hasta <= (fecha_fin + time '24:00');

                IF modalidad = 3 THEN
			RETURN EXTRACT(MONTH FROM AGE(fecha_fin , fecha_inicio));
		ELSE
			-- Calculo de Meses desde las Horas (horas/8/30)
			RETURN (total_horas/8/30)::integer;
		END IF;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_antiguedad_meses(integer, integer, date, date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bonificacion_fin_annio(double precision)

-- DROP FUNCTION rrhh_liq_mae_bonificacion_fin_annio(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bonificacion_fin_annio(salario_diario double precision)
  RETURNS double precision AS
$BODY$
    DECLARE bonificacion_fin_annio DOUBLE PRECISION;
        BEGIN
        -- ultimo salario / 30 * 140
        bonificacion_fin_annio = salario_diario * 140;
        RETURN bonificacion_fin_annio;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bonificacion_fin_annio(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bonificacion_fin_annio_fraccionada(double precision, integer)

-- DROP FUNCTION rrhh_liq_mae_bonificacion_fin_annio_fraccionada(double precision, integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bonificacion_fin_annio_fraccionada(salario_bono_fin_annio double precision, meses_antiguedad integer)
  RETURNS double precision AS
$BODY$
    DECLARE bonificacion_fin_annio_fraccionada DOUBLE PRECISION;
        BEGIN
        -- suedo bono_fin_annio * 140 / 12 * antiguedad meses
        bonificacion_fin_annio_fraccionada = (salario_bono_fin_annio *
140/12) * meses_antiguedad;
        RETURN bonificacion_fin_annio_fraccionada;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bonificacion_fin_annio_fraccionada(double precision, integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bonificacion_fin_annio_mensual(double precision)

-- DROP FUNCTION rrhh_liq_mae_bonificacion_fin_annio_mensual(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bonificacion_fin_annio_mensual(bonificacion_fin_annio double precision)
  RETURNS double precision AS
$BODY$
	DECLARE bonificacion_fin_annio_mensual DOUBLE PRECISION;
        BEGIN
		-- ultimo salario / 30 * 140
		bonificacion_fin_annio_mensual = bonificacion_fin_annio/12;
		RETURN bonificacion_fin_annio_mensual;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bonificacion_fin_annio_mensual(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bono_incentivo_ahorro(double precision)

-- DROP FUNCTION rrhh_liq_mae_bono_incentivo_ahorro(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bono_incentivo_ahorro(horas_trabajadas double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	incentivo_ahorro DOUBLE PRECISION;

        BEGIN

	    IF
	        horas_trabajadas < 1496
	    THEN
                incentivo_ahorro = (horas_trabajadas * 4000)/1496;
        ELSE
	        incentivo_ahorro = 4000;
	    END IF;
		
		RETURN incentivo_ahorro;    
	    
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bono_incentivo_ahorro(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bono_vacacional85(double precision)

-- DROP FUNCTION rrhh_liq_mae_bono_vacacional85(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bono_vacacional85(salario_diario double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	bono_vacacional85 DOUBLE PRECISION;

        BEGIN
		--bono_vacacional85 = salario diario * 85;
		bono_vacacional85 = salario_diario * 85;
		RETURN bono_vacacional85;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bono_vacacional85(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bono_vacacional_fraccionado(double precision, integer)

-- DROP FUNCTION rrhh_liq_mae_bono_vacacional_fraccionado(double precision, integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bono_vacacional_fraccionado(salario_bono_vacional double precision, meses_antiguedad integer)
  RETURNS double precision AS
$BODY$
	DECLARE bono_vacacional_fraccionado DOUBLE PRECISION;
        BEGIN
		-- salario_bono_vacional * 85 / 12 * antiguedad meses (>= 1 mes)

		bono_vacacional_fraccionado = (salario_bono_vacional * 85/12) * meses_antiguedad;
		RETURN bono_vacacional_fraccionado;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bono_vacacional_fraccionado(double precision, integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_bono_vacacional_mensual(double precision)

-- DROP FUNCTION rrhh_liq_mae_bono_vacacional_mensual(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_bono_vacacional_mensual(bono_vacacional85 double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	bono_vacacional_mensual DOUBLE PRECISION;
        BEGIN
		--bono_vacacional_mensual   = bono_vacacional85/12;
		bono_vacacional_mensual   = bono_vacacional85/12;
		RETURN bono_vacacional_mensual;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_bono_vacacional_mensual(double precision)
  OWNER TO openerp;

-- Function: rrhh_liq_mae_cant_dias_interes(date)

-- DROP FUNCTION rrhh_liq_mae_cant_dias_interes(date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_cant_dias_interes(fecha_fin date)
  RETURNS double precision AS
$BODY$
	DECLARE cant_dias_interes DOUBLE PRECISION;
        BEGIN
			SELECT cantidad_dias INTO  cant_dias_interes
                FROM for_pis_mae_tasas_bcv_prestaciones a
                WHERE a.mes = date_part('month', fecha_fin);               		
		RETURN cant_dias_interes;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_cant_dias_interes(date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_concatenarpis(integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_concatenarpis(integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_concatenarpis(maestro integer, inicio date, fin date)
  RETURNS character varying AS
$BODY$
DECLARE
	mPIS RECORD;
	pis_mae VARCHAR(240);
	
BEGIN
	pis_mae = '';
	
	FOR mPIS IN
		/*
		SELECT r.nro_preimpreso FROM for_pis_maestros ma
			INNER JOIN for_pis_mae_participacion_pis p
				ON ma.id = p.maestro_id
			INNER JOIN for_pis_registro_inicial r
				ON r.id = p.numero_id
			INNER JOIN for_pis_estados e
				ON r.estado_id = e.id
		WHERE	ma.id = maestro AND
			r.fecha_inicio >= inicio AND r.fecha_cierre <= fin
			-- AND r.estado_id = cer_estado
		*/
		SELECT DISTINCT(r.nro_preimpreso) FROM for_pis_registro_inicial r
			INNER JOIN for_pis_mae_asistencias a
				ON r.id = a.numero_id
			INNER JOIN for_pis_estados e
				ON r.estado_id = e.id
		WHERE	a.id = maestro AND
			r.fecha_inicio >= inicio AND r.fecha_cierre <= fin
			-- AND r.estado_id = cer_estado		
	LOOP
		IF pis_mae <> '' THEN
			pis_mae = pis_mae || ' - ' || mPIS.nro_preimpreso;
		ELSE
			pis_mae = mPIS.nro_preimpreso;
		END IF;
	END LOOP;

	RETURN pis_mae;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_concatenarpis(integer, date, date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_fecha_primera_asistencia(integer)

-- DROP FUNCTION rrhh_liq_mae_fecha_primera_asistencia(integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_fecha_primera_asistencia(maestro integer)
  RETURNS date AS
$BODY$
	DECLARE fecha_primera_asistencia DATE;
	
        BEGIN
		SELECT a.semana_desde INTO fecha_primera_asistencia
		FROM for_pis_mae_asistencias a
		WHERE a.maestro_id = maestro
		ORDER BY a.semana_desde ASC
		LIMIT 1;

		RETURN (fecha_primera_asistencia - time '04:30');
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_fecha_primera_asistencia(integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_fecha_ultima_asistencia(integer)

-- DROP FUNCTION rrhh_liq_mae_fecha_ultima_asistencia(integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_fecha_ultima_asistencia(maestro integer)
  RETURNS date AS
$BODY$
	DECLARE fecha_ultima_asistencia DATE;
	
        BEGIN
		SELECT a.semana_hasta INTO fecha_ultima_asistencia
		FROM for_pis_mae_asistencias a
		WHERE a.maestro_id = maestro
		ORDER BY a.semana_hasta DESC
		LIMIT 1;

		RETURN (fecha_ultima_asistencia + time '04:30');
	END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_fecha_ultima_asistencia(integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_id_estado(integer)

-- DROP FUNCTION rrhh_liq_mae_id_estado(integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_id_estado(id_dependencia integer)
  RETURNS integer AS
$BODY$
	DECLARE
		dependencia CHAR;
		id_estado INTEGER;
        BEGIN
		SELECT
		(CASE WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES AMAZONAS' THEN '1'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES ANZOATEGUI' THEN '2'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES APURE' THEN '3'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES ARAGUA' THEN '4'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES BARINAS' THEN '5'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES BOLIVAR' THEN '6'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES CARABOBO' THEN '7'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES COJEDES' THEN '8'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES DELTA AMACURO' THEN '9'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES DISTRITO CAPITAL' THEN '10'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES FALCON' THEN '11'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES GUARICO' THEN '12'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES LARA' THEN '13'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES MERIDA' THEN '14'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES MIRANDA' THEN '15'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES MONAGAS' THEN '16'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES NUEVA ESPARTA' THEN '17'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES PORTUGUESA' THEN '18'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES SUCRE' THEN '19'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES TACHIRA' THEN '20'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES TRUJILLO' THEN '21'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES VARGAS' THEN '22'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES YARACUY' THEN '23'
			WHEN d.dependencia_administrativa='GERENCIA REGIONAL INCES ZULIA' THEN '24'
			ELSE '99'
		END)::integer AS "cod_edo" INTO id_estado
                FROM sisr_pla_dependencias_administrativas d
                WHERE d.id = id_dependencia;

		RETURN id_estado;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_id_estado(integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_id_tasa_interes_prest(date)

-- DROP FUNCTION rrhh_liq_mae_id_tasa_interes_prest(date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_id_tasa_interes_prest(fecha_fin date)
  RETURNS integer AS
$BODY$
	DECLARE id_tasa_interes_prest INTEGER;
        BEGIN
		

		SELECT id INTO  id_tasa_interes_prest
                FROM for_pis_mae_tasas_bcv_prestaciones a
                WHERE a.mes = date_part('month', fecha_fin);
                           		
		RETURN id_tasa_interes_prest;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_id_tasa_interes_prest(date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_interes_prest(double precision, double precision, integer)

-- DROP FUNCTION rrhh_liq_mae_interes_prest(double precision, double precision, integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_interes_prest(prestaciones double precision, tasa_interes_prest double precision, cant_dias_interes integer)
  RETURNS double precision AS
$BODY$
	DECLARE interes_prest DOUBLE PRECISION;
        BEGIN
		--interes_prest = ((prestaciones * tasa_interes_prest) /100 /365) * cant_dias_interes;
		-- Cambio en la formula a solicitud de RRHH el día 01/11/2014
		interes_prest = ((prestaciones * tasa_interes_prest) /365) * cant_dias_interes;
                           		
		RETURN interes_prest;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_interes_prest(double precision, double precision, integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_prestaciones(double precision, integer)

-- DROP FUNCTION rrhh_liq_mae_prestaciones(double precision, integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_prestaciones(salario_integral_diario double precision, meses_antiguedad integer)
  RETURNS double precision AS
$BODY$
	DECLARE prestaciones DOUBLE PRECISION;
        BEGIN
		-- antiguedad meses * 5 * salario integral diario 
                prestaciones = meses_antiguedad * 5 * salario_integral_diario;
		
		RETURN prestaciones;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_prestaciones(double precision, integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_salario_anual(double precision, double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_anual(double precision, double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_anual(salario_diario double precision, salario_bono_vacional double precision, salario_bono_fin_annio double precision)
  RETURNS double precision AS
$BODY$
	DECLARE salario_anual DOUBLE PRECISION;
        BEGIN
		-- (salario diario + salario bonificacion fin annio + salario bono vacacional) * 360
          salario_anual = (salario_diario + salario_bono_vacional + salario_bono_fin_annio) * 360;

		RETURN salario_anual;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_anual(double precision, double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_salario_bono_fin_annio(double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_bono_fin_annio(double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_bono_fin_annio(salario_diario double precision, bono_vacacional_mensual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	salario_bono_fin_annio DOUBLE PRECISION;

        BEGIN
		-- salario diario + alicuota de BFA
		salario_bono_fin_annio = salario_diario + (bono_vacacional_mensual/30);
		
		RETURN salario_bono_fin_annio;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_bono_fin_annio(double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_salario_bono_vacional(double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_bono_vacional(double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_bono_vacional(salario_diario double precision, bonificacion_fin_annio double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	salario_bono_vacional DOUBLE PRECISION;


        BEGIN
		-- salario diario + alicuota de BFA
		salario_bono_vacional = salario_diario + ((bonificacion_fin_annio/12)/30);
		
		RETURN salario_bono_vacional;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_bono_vacional(double precision, double precision)
  OWNER TO openerp;

-- Function: rrhh_liq_mae_salario_diario(double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_diario(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_diario(salario_mensual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE 
	salario_diario DOUBLE PRECISION;


        BEGIN
		-- salario mensual / 30
		-- salario_diario = salario_mensual/30;

		-- Modificacion según GG RRHH Mie 22 Oct 2014 7:00 PM
		salario_diario = salario_mensual/30;
		
		RETURN salario_diario;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_diario(double precision)
  OWNER TO openerp;

-- Function: rrhh_liq_mae_salario_integral_diario(double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_integral_diario(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_integral_diario(salario_integral_mensual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE salario_integral_diario DOUBLE PRECISION;
        BEGIN
		-- salario integral mensual / 30 (>= 1 mes)
		salario_integral_diario = salario_integral_mensual/30;
		RETURN salario_integral_diario;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_integral_diario(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_salario_integral_mensual(double precision)

-- DROP FUNCTION rrhh_liq_mae_salario_integral_mensual(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_salario_integral_mensual(salario_anual double precision)
  RETURNS double precision AS
$BODY$
	DECLARE salario_integral_mensual DOUBLE PRECISION;
        BEGIN
		-- salario anual / 12
           salario_integral_mensual = salario_anual/12;
		RETURN salario_integral_mensual;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_salario_integral_mensual(double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_subtotal_asignaciones_legales(double precision, double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_subtotal_asignaciones_legales(double precision, double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_subtotal_asignaciones_legales(vacaciones_fraccionadas double precision, bono_vacacional_fraccionado double precision, bonificacion_fin_annio_fraccionada double precision)
  RETURNS double precision AS
$BODY$
	DECLARE subtotal_asignacioneslegales DOUBLE PRECISION;
        BEGIN
		
                subtotal_asignacioneslegales = (vacaciones_fraccionadas + bono_vacacional_fraccionado +  bonificacion_fin_annio_fraccionada);
		
		RETURN subtotal_asignacioneslegales;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_subtotal_asignaciones_legales(double precision, double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_subtotal_otras_asignaciones(double precision)

-- DROP FUNCTION rrhh_liq_mae_subtotal_otras_asignaciones(double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_subtotal_otras_asignaciones(incentivo_ahorro double precision)
  RETURNS double precision AS
$BODY$
	DECLARE subtotal_otras_asignaciones DOUBLE PRECISION;
        BEGIN
		
                subtotal_otras_asignaciones = incentivo_ahorro;
		
		RETURN subtotal_otras_asignaciones;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_subtotal_otras_asignaciones(double precision)
  OWNER TO openerp;

-- Function: rrhh_liq_mae_tasa_interes_prest(date)

-- DROP FUNCTION rrhh_liq_mae_tasa_interes_prest(date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_tasa_interes_prest(fecha_fin date)
  RETURNS double precision AS
$BODY$
	DECLARE tasa_interes_prest DOUBLE PRECISION;
        BEGIN
		

		SELECT tasa_interes INTO  tasa_interes_prest
                FROM for_pis_mae_tasas_bcv_prestaciones a
                WHERE a.mes = date_part('month', fecha_fin);
                           		
		RETURN tasa_interes_prest;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_tasa_interes_prest(date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_total_asignaciones(double precision, double precision, double precision)

-- DROP FUNCTION rrhh_liq_mae_total_asignaciones(double precision, double precision, double precision);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_total_asignaciones(prestaciones double precision, subtotal_asignacioneslegales double precision, subtotal_otras_asignaciones double precision)
  RETURNS double precision AS
$BODY$
	DECLARE total_asignaciones DOUBLE PRECISION;
        BEGIN
		
                total_asignaciones = (prestaciones + subtotal_asignacioneslegales +  subtotal_otras_asignaciones);
		
		RETURN total_asignaciones;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_total_asignaciones(double precision, double precision, double precision)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_total_horas_trabajadas(integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_total_horas_trabajadas(integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_total_horas_trabajadas(maestroid integer, fecha_inicio date, fecha_fin date)
  RETURNS integer AS
$BODY$
	DECLARE total_horas INTEGER;
        BEGIN
		--Se toman en cuenta los sabados y domingos para el calculo total de horas trabajadas
		--SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)
		SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)+sum(a.horas_sabado)+sum(a.horas_domingo) INTO  total_horas
                FROM for_pis_mae_asistencias a
                WHERE a.maestro_id = maestroid
			AND a.semana_desde >= (fecha_inicio - time '24:00')
			AND a.semana_hasta <= (fecha_fin + time '24:00');
		RETURN total_horas;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_total_horas_trabajadas(integer, date, date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_ultimo_salario_mensual(integer)

-- DROP FUNCTION rrhh_liq_mae_ultimo_salario_mensual(integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_ultimo_salario_mensual(maestro integer)
  RETURNS double precision AS
$BODY$
	DECLARE ultimo_salario DOUBLE PRECISION;
        BEGIN
		SELECT SUM(monto_pago) INTO ultimo_salario 
		FROM (SELECT monto_pago
			FROM for_pis_mae_consolidado_detalle
			WHERE maestro_id = maestro
			ORDER BY hasta DESC
			LIMIT 2) AS quincenas;

		RETURN ultimo_salario;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_ultimo_salario_mensual(integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_ultimo_salario_mensual_promediado(integer, integer, integer, date, date)

-- DROP FUNCTION rrhh_liq_mae_ultimo_salario_mensual_promediado(integer, integer, integer, date, date);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_ultimo_salario_mensual_promediado(maestro integer, meses integer, modalidad integer, fecha_fin date, fecha_inicio date)
  RETURNS double precision AS
$BODY$
	DECLARE total_horas INTEGER;
	DECLARE ultimo_salario DOUBLE PRECISION;
        BEGIN
		/*
		SELECT SUM(monto_pago) INTO ultimo_salario 
		FROM for_pis_mae_consolidado_detalle
		WHERE maestro_id = maestro
		GROUP BY maestro_id;
		*/
		
		SELECT sum(monto_pago) INTO ultimo_salario 
		FROM for_pis_mae_consolidado_detalle
		WHERE maestro_id = maestro
		GROUP BY maestro_id, consolidado_id
		ORDER BY consolidado_id DESC
		LIMIT 1;

		SELECT sum(a.horas_lunes)+sum(a.horas_martes)+sum(a.horas_miercoles)+sum(a.horas_jueves)+sum(a.horas_viernes)+sum(a.horas_sabado)+sum(a.horas_domingo) INTO  total_horas
                FROM for_pis_mae_asistencias a
                WHERE a.maestro_id = maestro
                  AND a.semana_desde >= (fecha_inicio - time '24:00')
		  AND a.semana_hasta <= (fecha_fin + time '24:00');
		
		IF meses = 0 THEN
			RETURN (ultimo_salario - ultimo_salario);
		ELSE
			IF modalidad = 3 THEN
				-- Calculo de Ultimo Salario/ meses de antiguedad. Cada mes representa veinte (20) días
				RETURN (ultimo_salario / meses);
			ELSE
				-- Calculo de Ultimo Salario/horas trabajadas * 30
				
				RETURN ((ultimo_salario/total_horas) * 30);
				
			END IF;
		END IF;		
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_ultimo_salario_mensual_promediado(integer, integer, integer, date, date)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_vacaciones_fraccionadas(double precision, integer)

-- DROP FUNCTION rrhh_liq_mae_vacaciones_fraccionadas(double precision, integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_vacaciones_fraccionadas(salario_diario double precision, meses_antiguedad integer)
  RETURNS double precision AS
$BODY$
    DECLARE vacaciones_fraccionadas DOUBLE PRECISION;
        BEGIN
        -- suedo diario * 30 / 12 * antiguedad meses (>= 1 mes)
    vacaciones_fraccionadas = (salario_diario * 30/12) * meses_antiguedad;
        RETURN vacaciones_fraccionadas;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_vacaciones_fraccionadas(double precision, integer)
  OWNER TO openerp;


-- Function: rrhh_liq_mae_valor_hora(integer)

-- DROP FUNCTION rrhh_liq_mae_valor_hora(integer);

CREATE OR REPLACE FUNCTION rrhh_liq_mae_valor_hora(maestro_id integer)
  RETURNS double precision AS
$BODY$
	DECLARE valor_hora DOUBLE PRECISION;
        BEGIN
		SELECT a.valor_hora INTO valor_hora
		FROM for_pis_mae_valor_hora a
		INNER JOIN for_pis_maestros mae on mae.id = maestro_id
		WHERE mae.nivel_id = a.id; 
		RETURN valor_hora;
        END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION rrhh_liq_mae_valor_hora(integer)
  OWNER TO openerp;		
        """)
        
        # Ejecuta sentencias SQL para agregar el Procedimiento Almacenado de Cálculo de la Liquidación
        cr.execute("""
-- Function: generar_liquidacion_maestro()

-- DROP FUNCTION generar_liquidacion_maestro();

CREATE OR REPLACE FUNCTION generar_liquidacion_maestro()
  RETURNS trigger AS
$BODY$
DECLARE

  -- DECLARACIONES DE VARIABLES (DE CAMPOS)
  sp_bas_bono_vacacional double precision; -- Bono Vacacional
  sp_bvf_salario_mensual double precision; -- Salario Mensual
  sp_bfaf_monto_a_pagar double precision; -- Monto a Pagar
  sp_maestro_id integer; -- Maestro
  sp_total_horas integer; -- Total Horas
  sp_vfr_dias_a_pagar double precision; -- Dias a Pagar
  sp_pis_participa text; -- PIS donde participó
  sp_bvf_dias_a_pagar double precision; -- Días a Pagar
  sp_motivo_egreso_id integer; -- Codigo Motivo Egreso
  sp_ded_concepto character varying(200); -- Concepto de Deducción
  sp_ultimo_salario double precision; -- Ultimo Salario
  sp_cargo character varying(100); -- Cargo
  sp_vfr_monto_a_pagar double precision; -- Monto a Pagar
  sp_ded_monto_a_deducir double precision; -- Monto a Deducir
  sp_vfr_total_dias_pagar double precision; -- Total Dias a Pagar
  sp_vfr_sueldo_mensual double precision; -- Salario Mensual
  sp_bas_salario_mensual double precision; -- Salario Mensual
  sp_vfr_salario_diario double precision; -- Salario Diario
  sp_bvf_total_dias_pagar double precision; -- Total Dias a Pagar
  sp_bas_salario_int_diario_pres double precision; -- Salario Integral Diario (Prestaciones)
  sp_asig_tope_horas integer; -- Tope Horas
  sp_bvf_monto_a_pagar double precision; -- Monto a Pagar
  sp_bas_salario_anual double precision; -- Salario Anual
  sp_bfaf_total_dias_a_pagar double precision; -- Total Dias a Pagar
  sp_bfaf_dias_a_pagar double precision; -- Días a Pagar
  sp_bas_salario_diario double precision; -- Salario Diario
  sp_bvf_meses integer; -- Meses a Pagar
  sp_asig_cantidad_horas integer; -- Cantidad Horas
  sp_fecha_inicio date; -- Fecha Inicio
  sp_bas_bonificacion_fin double precision; -- Bonificación Fin Año
  sp_bas_alicuota_bono_vac double precision; -- Alícuota Diaria BV (Dozavo)
  sp_pres_sueldo_integral_mens double precision; -- Sueldo Integral Mensual
  sp_bvf_salario_diario double precision; -- Salario Diario
  sp_asig_monto_a_pagar double precision; -- Monto a Pagar
  sp_bfaf_salario_diario double precision; -- Salario Diario
  sp_pres_total_dias_pagar integer; -- Total días a Pagar
  sp_bas_salario_int_bfa double precision; -- Salario Integral Diario (Aguinaldos)
  sp_bas_alicuota_aguinaldo double precision; -- Alícuota Diaria BFA (Dozavo)
  sp_valor_hora double precision; -- Valor Hora
  sp_pres_sueldo_integral_diario double precision; -- Sueldo Integral Diario
  sp_estado_id integer; -- Código Estado
  sp_dependencia character varying(200); -- Dependencia
  sp_fecha_fin date; -- Fecha Fin
  sp_bfaf_meses integer; -- Meses a Pagar
  sp_asig_monto double precision; -- Monto
  sp_bfaf_salario_mensual double precision; -- Salario Mensual
  sp_vfr_meses integer; -- Meses a Pagar
  sp_pres_monto_a_pagar double precision; -- Monto a Pagar
  sp_bas_salario_int_bv double precision; -- Salario Integral Diario (Bono Vacacional)
  sp_dependencia_id integer; -- Dependencia
  sp_modalidad_id integer; -- Modalidad de Liquidación
  sp_total_asignaciones_legales double precision; -- Total de Asignaciones Legales
  sp_total_otras_asignaciones double precision; -- Total de otras Asignaciones
  sp_total_deducciones double precision; -- Total de Deducciones
  sp_total_liquidacion double precision; -- Total General de la Liquidación

  sp_antiguedad_dias integer; -- Antiguedad Dias
  sp_antiguedad_meses integer; -- Antiguedad Meses
  sp_antiguedad_annios integer; -- Antiguedad Años

  -- DECLARACIONES DE VARIABLES ADICIONALES (NO SE CREARON COMO CAMPOS)
  sp_bas_bono_vacacional_mensual double precision;
  sp_bas_bonificacion_fin_mensual double precision;

  -- DECLARACIONES DE VARIABLES ADICIONALES (Jue 16 / Vie 17 Oct)
  sp_total_asignaciones double precision; -- Total Asignaciones
  sp_total_pres_mas_interes double precision; -- Total Interes mas Prestaciones

  sp_ipre_tasa_interes_id integer; -- (Id o codigo de) Tasa de Interes Prestaciones
  sp_ipre_mes_tasa integer; -- Mes para cálculo de Intereses
  sp_ipre_monto_interes double precision; -- Interes sobre Prestaciones
  sp_ipre_dias_calculos integer; -- Días para cálculo de Intereses
  sp_ipre_tasa_interes_monto double precision; -- Monto de la Tasa de Interes Prestaciones
  
  sp_asig_concepto1 integer; -- Concepto de asignación1  
  sp_asig_concepto2 integer; -- Concepto de asignación2
  sp_asig_concepto3 integer; -- Concepto de asignación3

  sp_asig_monto_de_asignacion1 double precision; -- Monto de asignación1
  sp_asig_monto_de_asignacion2 double precision; -- Monto de Asignación2
  sp_asig_monto_de_asignacion3 double precision; -- Monto de Asignación3

  sp_ded_concepto1 integer; -- Concepto de deducción1
  sp_ded_concepto2 integer; -- Concepto de deducción2
  sp_ded_concepto3 integer; -- Concepto de deducción3

  sp_ded_monto_a_deducir1 double precision; -- Monto a deducir1
  sp_ded_monto_a_deducir2 double precision; -- Monto a deducir2
  sp_ded_monto_a_deducir3 double precision; -- Monto a deducir3

	BEGIN

	-- Función para generar los calculos de detalle de las Liquidaciones de Maestros de los PIS
		-- VALORES a pasar como PARAMETROS a las FUNCIONES:
		
		-- NEW.maestro_id
		-- NEW.dependencia_id
		-- NEW.modalidad_id,
		-- NEW.motivo_egreso_id,
		-- NEW.fecha_inicio,
		-- NEW.fecha_fin,
		-- NEW.ded_concepto,
		-- NEW.ded_monto_a_deducir,

	-- ASIGNACIONES / INICIALIZACIONES
	sp_cargo = 'Maestro Pueblo';
	sp_estado_id = rrhh_liq_mae_id_estado(NEW.dependencia_id) ; --F(x) para RECUPERAR

	-- sp_fecha_inicio = NEW.fecha_inicio;
	sp_fecha_inicio = rrhh_liq_mae_fecha_primera_asistencia(NEW.maestro_id);
	-- sp_fecha_fin = NEW.fecha_fin;
	sp_fecha_fin = rrhh_liq_mae_fecha_ultima_asistencia(NEW.maestro_id);
		
	sp_valor_hora = rrhh_liq_mae_valor_hora(NEW.maestro_id);
	sp_total_horas = rrhh_liq_mae_total_horas_trabajadas(NEW.maestro_id, sp_fecha_inicio, sp_fecha_fin);
	-- sp_ultimo_salario = rrhh_liq_mae_ultimo_salario_mensual(NEW.maestro_id);
	sp_pis_participa = rrhh_liq_mae_concatenarpis(NEW.maestro_id, sp_fecha_inicio, sp_fecha_fin);

	-- sp_antiguedad_annios = 0; --F(x) para RECUPERAR
	--sp_antiguedad_annios = 	EXTRACT(YEAR FROM AGE(NEW.fecha_fin , NEW.fecha_inicio));
	sp_antiguedad_annios = 	rrhh_liq_mae_antiguedad_annios(NEW.maestro_id, NEW.modalidad_id, sp_fecha_fin, sp_fecha_inicio);
	-- sp_antiguedad_meses = 6; --F(x) para RECUPERAR
	-- sp_antiguedad_meses = EXTRACT(MONTH FROM AGE(NEW.fecha_fin , NEW.fecha_inicio));
	sp_antiguedad_meses = 	rrhh_liq_mae_antiguedad_meses(NEW.maestro_id, NEW.modalidad_id, sp_fecha_fin, sp_fecha_inicio);
	--sp_antiguedad_dias = 13; --F(x) para RECUPERAR
	--sp_antiguedad_dias = EXTRACT(DAY FROM AGE(NEW.fecha_fin , NEW.fecha_inicio));
	sp_antiguedad_dias = 	rrhh_liq_mae_antiguedad_dias(NEW.maestro_id, NEW.modalidad_id, sp_fecha_fin, sp_fecha_inicio);

	-- Modificación según solicitud e indicaciones de la GG RRHH el mie 22 Oct 2014 7:00 PM
	sp_ultimo_salario = rrhh_liq_mae_ultimo_salario_mensual_promediado(NEW.maestro_id, sp_antiguedad_meses, NEW.modalidad_id, sp_fecha_fin, sp_fecha_inicio);

	sp_bas_salario_mensual = sp_ultimo_salario;
	sp_bas_salario_diario = rrhh_liq_mae_salario_diario(sp_bas_salario_mensual);
	
	sp_bas_bono_vacacional = rrhh_liq_mae_bono_vacacional85(sp_bas_salario_diario);
	sp_bas_bono_vacacional_mensual = sp_bas_bono_vacacional/12;

	sp_bas_bonificacion_fin = rrhh_liq_mae_bonificacion_fin_annio(sp_bas_salario_diario);
	sp_bas_bonificacion_fin_mensual = sp_bas_bonificacion_fin/12;
	
	sp_bas_alicuota_aguinaldo = rrhh_liq_mae_alicuota_diaria_bonificacion_fin_annio(sp_bas_salario_mensual, sp_bas_bono_vacacional_mensual);
	sp_bas_alicuota_bono_vac = rrhh_liq_mae_alicuota_diaria_bono_vacacional(sp_bas_salario_mensual, sp_bas_bonificacion_fin_mensual);
	
	sp_bas_salario_int_bv = rrhh_liq_mae_salario_bono_vacional(sp_bas_salario_diario, sp_bas_bonificacion_fin);
	sp_bas_salario_int_bfa = rrhh_liq_mae_salario_bono_fin_annio(sp_bas_salario_diario, sp_bas_bono_vacacional_mensual);
	
	sp_bas_salario_anual = rrhh_liq_mae_salario_anual(sp_bas_salario_diario, sp_bas_alicuota_bono_vac, sp_bas_alicuota_aguinaldo);

	sp_pres_sueldo_integral_mens = rrhh_liq_mae_salario_integral_mensual(sp_bas_salario_anual);
	-- sp_bas_salario_int_diario_pres = rrhh_liq_mae_salario_integral_diario(sp_pres_sueldo_integral_mens);
	sp_bas_salario_int_diario_pres = sp_bas_salario_diario + sp_bas_alicuota_aguinaldo + sp_bas_alicuota_bono_vac;
	
	sp_pres_sueldo_integral_diario = sp_bas_salario_int_diario_pres;
	sp_pres_total_dias_pagar = sp_antiguedad_meses * 5;
	sp_pres_monto_a_pagar = sp_pres_sueldo_integral_diario * sp_pres_total_dias_pagar;

	-- Asignación por INCENTIVO AL AHORRO
	sp_asig_tope_horas = 1496; -- Valor CONSTANTE para el año 2014
	sp_asig_monto = 4000; -- Valor CONSTANTE para el año 2014
	sp_asig_cantidad_horas = sp_total_horas;
	sp_asig_monto_a_pagar = rrhh_liq_mae_bono_incentivo_ahorro(sp_asig_cantidad_horas);
			
	-- rrhh_liq_mae_bono_vacacional_fraccionado(salario_bono_vacional; meses_antiguedad)
	sp_vfr_dias_a_pagar = 2.50;  -- CONSTANTE
	sp_vfr_meses = sp_antiguedad_meses;
	sp_vfr_total_dias_pagar = sp_vfr_meses * sp_vfr_dias_a_pagar;
	sp_vfr_sueldo_mensual = sp_bas_salario_mensual;
	sp_vfr_salario_diario = sp_bas_salario_diario;
	sp_vfr_monto_a_pagar = sp_vfr_salario_diario * sp_vfr_total_dias_pagar;

	sp_bvf_dias_a_pagar = 7.08;  -- CONSTANTE
	sp_bvf_meses = sp_antiguedad_meses;
	sp_bvf_total_dias_pagar = sp_bvf_meses * sp_bvf_dias_a_pagar; 
	sp_bvf_salario_mensual = sp_bas_bono_vacacional_mensual;
	sp_bvf_salario_diario = sp_bas_salario_int_bv;
	sp_bvf_monto_a_pagar = sp_bvf_salario_diario * sp_bvf_total_dias_pagar;
			  			      
	sp_bfaf_dias_a_pagar = 11.67;  -- CONSTANTE
	sp_bfaf_meses = sp_antiguedad_meses;
	sp_bfaf_total_dias_a_pagar = sp_bfaf_meses * sp_bfaf_dias_a_pagar;
	sp_bfaf_salario_mensual = sp_bas_bonificacion_fin_mensual;
	sp_bfaf_salario_diario = sp_bas_salario_int_bfa;
	sp_bfaf_monto_a_pagar = sp_bfaf_salario_diario * sp_bfaf_total_dias_a_pagar;

	-- INTERESES SOBRE PRESTACIONES
	sp_ipre_tasa_interes_id = rrhh_liq_mae_id_tasa_interes_prest(sp_fecha_fin); 
	sp_ipre_mes_tasa = date_part('month',sp_fecha_fin); --F(x) para RECUPERAR
	sp_ipre_dias_calculos = rrhh_liq_mae_cant_dias_interes(sp_fecha_fin);
	-- Modificación según solicitud e indicaciones de la GG RRHH el mar 04 Nov 2014 9:00 PM
	-- sp_ipre_monto_interes = rrhh_liq_mae_tasa_interes_prest(sp_fecha_fin);
	sp_ipre_tasa_interes_monto = rrhh_liq_mae_tasa_interes_prest(sp_fecha_fin);
	sp_ipre_monto_interes = rrhh_liq_mae_interes_prest(sp_pres_monto_a_pagar, sp_ipre_tasa_interes_monto, sp_ipre_dias_calculos);
	-- Total Interes sobre Prestaciones
	-- sp_total_pres_mas_interes = sp_pres_sueldo_integral_mens * (sp_ipre_monto_interes / 100) / 365 * sp_ipre_dias_calculos;
	sp_total_pres_mas_interes = sp_ipre_monto_interes;
	
	-- ASIGNACIONES LEGALES comprende:
	-- Prestaciones + Intereses sobre Prestaciones + Incentivo al Ahorro + VFR + BVF + BFAF
	sp_total_asignaciones_legales = sp_pres_monto_a_pagar + sp_total_pres_mas_interes + sp_asig_monto_a_pagar + sp_vfr_monto_a_pagar + sp_bvf_monto_a_pagar + sp_bfaf_monto_a_pagar;

	sp_asig_monto_de_asignacion1 = NEW.asig_monto_de_asignacion1;
	sp_asig_monto_de_asignacion2 = NEW.asig_monto_de_asignacion2;
	sp_asig_monto_de_asignacion3 = NEW.asig_monto_de_asignacion3;
	sp_total_otras_asignaciones = sp_asig_monto_de_asignacion1 + sp_asig_monto_de_asignacion2 + sp_asig_monto_de_asignacion3;

	sp_total_asignaciones = sp_total_asignaciones_legales + sp_total_otras_asignaciones;
	
	sp_ded_monto_a_deducir1 = NEW.ded_monto_a_deducir1;
	sp_ded_monto_a_deducir2 = NEW.ded_monto_a_deducir2;
	sp_ded_monto_a_deducir3 = NEW.ded_monto_a_deducir3;
	sp_total_deducciones = sp_ded_monto_a_deducir1 + sp_ded_monto_a_deducir2 + sp_ded_monto_a_deducir3;
	
	sp_total_liquidacion = sp_total_asignaciones - sp_total_deducciones;
	

	IF (TG_OP = 'INSERT') THEN
	
		UPDATE for_pis_mae_liquidaciones SET
			cargo = sp_cargo,
			estado_id = sp_estado_id,
			valor_hora = sp_valor_hora,
			total_horas = sp_total_horas,
			ultimo_salario = sp_ultimo_salario,
			pis_participa = sp_pis_participa,

			-- Actualiza los valores introducidos a F1A y FUA
			fecha_inicio = sp_fecha_inicio,
			fecha_fin = sp_fecha_fin,
			
			antiguedad_annios = sp_antiguedad_annios,
			antiguedad_meses = sp_antiguedad_meses,
			antiguedad_dias = sp_antiguedad_dias,

			bas_salario_mensual = sp_bas_salario_mensual,
			bas_salario_diario = sp_bas_salario_diario,
			bas_bono_vacacional = sp_bas_bono_vacacional,
			bas_bonificacion_fin = sp_bas_bonificacion_fin,
			-- bas_bonificacion_fin_mensual = sp_bas_bonificacion_fin_mensual,
			bas_alicuota_aguinaldo = sp_bas_alicuota_aguinaldo,
			
			bas_alicuota_bono_vac = sp_bas_alicuota_bono_vac,
			bas_salario_int_bv = sp_bas_salario_int_bv,
			bas_salario_int_bfa = sp_bas_salario_int_bfa,
			bas_salario_anual = sp_bas_salario_anual,

			pres_sueldo_integral_mens = sp_pres_sueldo_integral_mens,
			bas_salario_int_diario_pres = sp_bas_salario_int_diario_pres,
			pres_sueldo_integral_diario = sp_pres_sueldo_integral_diario,
			pres_total_dias_pagar = sp_pres_total_dias_pagar,
			pres_monto_a_pagar = sp_pres_monto_a_pagar,

			ipre_tasa_interes_id = sp_ipre_tasa_interes_id,
			ipre_mes_tasa = sp_ipre_mes_tasa,
			ipre_monto_interes = sp_ipre_monto_interes,
			ipre_dias_calculos = sp_ipre_dias_calculos,
			total_pres_mas_interes = sp_total_pres_mas_interes,

			asig_tope_horas = sp_asig_tope_horas,
			asig_monto_a_pagar = sp_asig_monto_a_pagar,
			asig_monto = sp_asig_monto,
			asig_cantidad_horas = sp_asig_cantidad_horas,
			
			bvf_meses = sp_bvf_meses,
			bvf_dias_a_pagar = sp_bvf_dias_a_pagar,
			bvf_total_dias_pagar = sp_bvf_total_dias_pagar,
			bvf_salario_mensual = sp_bvf_salario_mensual,
			bvf_salario_diario = sp_bvf_salario_diario,
			bvf_monto_a_pagar = sp_bvf_monto_a_pagar,
			  
			vfr_meses = sp_vfr_meses,
			vfr_dias_a_pagar = sp_vfr_dias_a_pagar,
			vfr_total_dias_pagar = sp_vfr_total_dias_pagar,
			vfr_sueldo_mensual = sp_vfr_sueldo_mensual,
			vfr_salario_diario = sp_vfr_salario_diario,
			vfr_monto_a_pagar = sp_vfr_monto_a_pagar,
			      
			bfaf_meses = sp_bfaf_meses,
			bfaf_dias_a_pagar = sp_bfaf_dias_a_pagar,
			bfaf_total_dias_a_pagar = sp_bfaf_total_dias_a_pagar,
			bfaf_salario_mensual = sp_bfaf_salario_mensual,
			bfaf_salario_diario = sp_bfaf_salario_diario,
			bfaf_monto_a_pagar = sp_bfaf_monto_a_pagar,

			total_asignaciones_legales = sp_total_asignaciones_legales,
                        total_otras_asignaciones = sp_total_otras_asignaciones,
			total_asignaciones = sp_total_asignaciones,
                        total_deducciones = sp_total_deducciones,
			total_liquidacion = sp_total_liquidacion

			WHERE for_pis_mae_liquidaciones.id = NEW.id;
	
	END IF;

	/*
	-- Función(es) a Ejecutar en caso de Actualización de la Tabla Maestra de Liquidaciones
	IF (TG_OP = 'UPDATE') THEN 
		UPDATE for_pis_mae_liquidaciones mliq
		(campos) = (valores)
		WHERE mliq.id = OLD.id;
	END IF;

	-- Función(es) a Ejecutar en caso de Eliminación de la Tabla Maestra de Liquidaciones
	IF (TG_OP = 'DELETE') THEN 
		DELETE FROM for_pis_mae_liquidaciones mliq
		WHERE mliq.id = OLD.id;
	END IF;
	*/
	RETURN NEW;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION generar_liquidacion_maestro()
  OWNER TO openerp;
        """)
        
        # Ejecuta sentencias SQL para agregar el Disparador del Procedimiento Almacenado de Cálculo de la Liquidación
        cr.execute("""
-- Trigger: generar_liquidaciones on for_pis_mae_liquidaciones

DROP TRIGGER IF EXISTS generar_liquidaciones ON for_pis_mae_liquidaciones;

CREATE TRIGGER generar_liquidaciones
  AFTER INSERT
  ON for_pis_mae_liquidaciones
  FOR EACH ROW
  EXECUTE PROCEDURE generar_liquidacion_maestro();     
        """)
            
for_pis_mae_liquidaciones()

class report_for_pis_mae_liquidaciones(osv.osv):
    """Reporte de Liquidación de Facilitadores"""
    _name = 'report.for.pis.mae_liquidaciones'
    _description = "Planilla de Liquidación de Facilitadores"
    _auto = False
    _columns = {
        'id': fields.integer('Correlativo', readonly=True),
        'create_uid': fields.integer('Registro UserId Creacion', readonly=True),
        'create_date': fields.char('Registro Fecha Creacion', size=20, readonly=True),
        'write_date': fields.char('Registro Fecha Modificacion', size=20, readonly=True),
        'write_uid': fields.integer('Registro UserId Modificacion', readonly=True),
        'maestro_id': fields.many2one('for.pis.maestros', 'Facilitador', readonly=True, relate=True),
        'fecha_inicio': fields.char('Fecha Inicio', size=20, readonly=True),
        'fecha_fin': fields.char('Fecha Fin', size=20, readonly=True),
        'antiguedad_dias': fields.integer('Antiguedad Dias', readonly=True),
        'antiguedad_meses': fields.integer('Antiguedad Meses', readonly=True),
        'antiguedad_annios': fields.integer('Antiguedad Años', readonly=True),
        'pis_participa': fields.text('Formaciones donde participó', readonly=True),
        'valor_hora': fields.float('Valor Hora', readonly=True),
        'ultimo_salario': fields.float('Ultimo Salario', readonly=True),
        'total_horas': fields.integer('Total Horas', readonly=True),
        'cargo': fields.char('Cargo', size=100, readonly=True),
        'dependencia_id': fields.many2one('sisr.pla.dependencias_administrativas', 'Dependencia', readonly=True, relate=True),
        'estado_id': fields.many2one('for.pis.estados', 'Código Estado', readonly=True, relate=True),
        'motivo_egreso_id': fields.many2one('for.pis.mae_motivos_egreso', 'Codigo Motivo Egreso', readonly=True, relate=True),
        'modalidad_id': fields.many2one('for.pis.mae_modalidades_liquidacion', 'Modalidad de Liquidación', readonly=True, relate=True),
        'pres_total_dias_pagar': fields.integer('Total días a Pagar', readonly=True),
        'pres_sueldo_integral_mens': fields.float('Sueldo Integral Mensual', readonly=True),
        'pres_sueldo_integral_diario': fields.float('Sueldo Integral Diario', readonly=True),
        'pres_monto_a_pagar': fields.float('Monto a Pagar', readonly=True),
        'asig_tope_horas': fields.integer('Tope Horas', readonly=True),
        'asig_monto': fields.float('Monto', readonly=True),
        'asig_cantidad_horas': fields.integer('Cantidad Horas', readonly=True),
        'asig_monto_a_pagar': fields.float('Monto a Pagar', readonly=True),
        'ded_concepto': fields.char('Concepto de Deducción', size=200, readonly=True),
        'ded_monto_a_deducir': fields.float('Monto a Deducir', readonly=True),
        'bas_salario_mensual': fields.float('Salario Mensual', readonly=True),
        'bas_salario_anual': fields.float('Salario Anual', readonly=True),
        'bas_salario_diario': fields.float('Salario Diario', readonly=True),
        'bas_salario_int_diario_pres': fields.float('Salario Integral Diario (Prestaciones)', readonly=True),
        'bas_salario_int_bv': fields.float('Salario Integral Diario (Bono Vacacional)', readonly=True),
        'bas_salario_int_bfa': fields.float('Salario Integral Diario (Aguinaldos)', readonly=True),
        'bas_bono_vacacional': fields.float('Bono Vacacional', readonly=True),
        'bas_bonificacion_fin': fields.float('Bonificación Fin Año', readonly=True),
        'bas_alicuota_aguinaldo': fields.float('Alícuota Diaria BFA (Dozavo)', readonly=True),
        'bas_alicuota_bono_vac': fields.float('Alícuota Diaria BV (Dozavo)', readonly=True),
        'vfr_dias_a_pagar': fields.float('Dias a Pagar', readonly=True),
        'vfr_meses': fields.integer('Meses a Pagar', readonly=True),
        'vfr_total_dias_pagar': fields.float('Total Dias a Pagar', readonly=True),
        'vfr_sueldo_mensual': fields.float('Salario Mensual', readonly=True),
        'vfr_salario_diario': fields.float('Salario Diario', readonly=True),
        'vfr_monto_a_pagar': fields.float('Monto a Pagar', readonly=True),
        'bvf_dias_a_pagar': fields.float('Días a Pagar', readonly=True),
        'bvf_meses': fields.integer('Meses a Pagar', readonly=True),
        'bvf_total_dias_pagar': fields.float('Total Dias a Pagar', readonly=True),
        'bvf_salario_mensual': fields.float('Salario Mensual', readonly=True),
        'bvf_salario_diario': fields.float('Salario Diario', readonly=True),
        'bvf_monto_a_pagar': fields.float('Monto a Pagar', readonly=True),
        'bfaf_dias_a_pagar': fields.float('Días a Pagar', readonly=True),
        'bfaf_meses': fields.integer('Meses a Pagar', readonly=True),
        'bfaf_total_dias_a_pagar': fields.float('Total Dias a Pagar', readonly=True),
        'bfaf_salario_mensual': fields.float('Salario Mensual', readonly=True),
        'bfaf_salario_diario': fields.float('Salario Diario', readonly=True),
        'bfaf_monto_a_pagar': fields.float('Monto a Pagar', readonly=True),
        'total_asignaciones_legales': fields.float('Total Asignaciones Legales', readonly=True),
        'total_otras_asignaciones': fields.float('Total Otras Asignaciones', readonly=True),
        'total_deducciones': fields.float('Total deducciones', readonly=True),
        'total_liquidacion': fields.float('Total Liquidación', readonly=True),
# campos nuevos, intereses, otras asignaciones, otras deducciones, total asignaciones
        'ipre_tasa_interes_id': fields.many2one('for.pis.mae_tasas_bcv_prestaciones','Tasa de Interes Prestaciones', readonly=True, relate=True),
        'ipre_mes_tasa': fields.integer('Mes para cálculo de Intereses', readonly=True),
        'ipre_dias_calculos': fields.integer('Días para cálculo de Intereses', readonly=True),
        'ipre_monto_interes': fields.float('Interes sobre Prestaciones', readonly=True),
        'total_pres_mas_interes': fields.float('Total Interes mas Prestaciones', readonly=True),
        'asig_concepto1': fields.many2one('for.pis.mae_tipos_asignaciones','Concepto de Asignación 1', readonly=True, relate=True),
        'asig_monto_de_asignacion1': fields.float('Monto de Asignación 1', readonly=True),
        'asig_concepto2': fields.many2one('for.pis.mae_tipos_asignaciones', 'Concepto de Asignación 2', readonly=True, relate=True),
        'asig_monto_de_asignacion2': fields.float('Monto de Asignación 2', readonly=True),
        'asig_concepto3': fields.many2one('for.pis.mae_tipos_asignaciones','Concepto de Asignación 3', readonly=True, relate=True),
        'asig_monto_de_asignacion3': fields.float('Monto de Asignación 3', readonly=True),
        'ded_concepto1': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 1', readonly=True, relate=True),
        'ded_monto_a_deducir1': fields.float('Monto a deducir1', readonly=True),
        'ded_concepto2': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 2', readonly=True, relate=True),
        'ded_monto_a_deducir2': fields.float('Monto a deducir2', readonly=True),
        'ded_concepto3': fields.many2one('for.pis.mae_tipos_deducciones','Concepto de Deducción 3', readonly=True, relate=True),
        'ded_monto_a_deducir3': fields.float('Monto a deducir2', readonly=True),
        'total_asignaciones': fields.float('Total Asignaciones', readonly=True),
    }
    #_order = 'correlativo'

    def init(self, cr):
        # Ejecuta sentencias SQL para agregar la Vista del Reporte de Planilla de Liquidación
        cr.execute("""
        -- View: for_pis_mae_reporte_planilla_liquidacion_view

-- DROP VIEW for_pis_mae_reporte_planilla_liquidacion_view;

CREATE OR REPLACE VIEW for_pis_mae_reporte_planilla_liquidacion_view AS 
 SELECT liq.id, liq.create_uid, liq.create_date, liq.write_date, liq.write_uid, liq.ipre_monto_interes, liq.total_horas, liq.pis_participa, to_char(liq.fecha_fin::timestamp with time zone, 'DD/MM/YYYY'::text) AS fecha_fin, liq.dependencia_id, liq.ded_concepto, liq.ultimo_salario, liq.ded_monto_a_deducir, liq.vfr_salario_diario, liq.bvf_total_dias_pagar, liq.bas_salario_int_diario_pres, liq.bvf_monto_a_pagar, liq.ipre_dias_calculos, liq.bas_salario_anual, liq.modalidad_id, liq.bfaf_total_dias_a_pagar, liq.bvf_meses, liq.asig_cantidad_horas, liq.total_asignaciones, liq.bas_alicuota_bono_vac, liq.vfr_sueldo_mensual, liq.bfaf_monto_a_pagar, liq.ded_concepto2, liq.ded_concepto3, liq.ded_concepto1, liq.asig_monto_a_pagar, liq.antiguedad_meses, liq.pres_total_dias_pagar, liq.bas_alicuota_aguinaldo, liq.valor_hora, liq.total_liquidacion, liq.total_asignaciones_legales, liq.ded_monto_a_deducir3, liq.asig_monto_de_asignacion2, liq.asig_monto_de_asignacion3, liq.asig_monto_de_asignacion1, liq.total_otras_asignaciones, liq.bfaf_salario_mensual, liq.vfr_meses, liq.total_pres_mas_interes, liq.bas_bono_vacacional, liq.maestro_id, liq.ipre_tasa_interes_id, liq.pres_sueldo_integral_diario, liq.bvf_dias_a_pagar, liq.motivo_egreso_id, liq.cargo, liq.vfr_total_dias_pagar, liq.bas_salario_mensual, liq.vfr_monto_a_pagar, liq.asig_tope_horas, liq.total_deducciones, to_char(liq.fecha_inicio::timestamp with time zone, 'DD/MM/YYYY'::text) AS fecha_inicio, liq.ded_monto_a_deducir1, liq.ded_monto_a_deducir2, liq.antiguedad_annios, liq.bfaf_dias_a_pagar, liq.asig_monto, liq.bas_salario_diario, liq.bas_bonificacion_fin, liq.ipre_mes_tasa, liq.bvf_salario_diario, liq.bfaf_salario_diario, liq.bas_salario_int_bfa, liq.antiguedad_dias, liq.pres_sueldo_integral_mens, liq.estado_id, liq.asig_concepto2, liq.asig_concepto3, liq.asig_concepto1, liq.bfaf_meses, liq.vfr_dias_a_pagar, liq.bvf_salario_mensual, liq.pres_monto_a_pagar, liq.bas_salario_int_bv
   FROM for_pis_mae_liquidaciones liq;

ALTER TABLE for_pis_mae_reporte_planilla_liquidacion_view
  OWNER TO openerp;
        """)

report_for_pis_mae_liquidaciones()

class for_pis_mae_tasas_bcv_prestaciones(osv.osv):
    """Tabla Referencial de Tasas de Intereses Sobre Prestaciones del BCV para el cálculo de Liquidaciones de Facilitadores"""
    _name = 'for.pis.mae_tasas_bcv_prestaciones'
    #_rec_name = 'codigo'
    _rec_name = 'tasa_interes'

    _columns = {
        'codigo': fields.char('Código', size=3, required=True, help='Código de la Tasa de Interes'),
		'annio': fields.integer('Año Tasa', required=True, help='Año de Aplicación de la Tasa'),
		'mes': fields.integer('Mes Tasa', required=True, help='Mes de Aplicación de la Tasa'),
		'cantidad_dias': fields.integer('Cantidad de días', required=True, help='Cantidad de días del mes'),
		'tasa_interes': fields.float('Tasa Activa', required=True, help='Valor de la Tasa de Interes Activa'),
		'gaceta_oficial': fields.integer('Gaceta Oficial', required=True, help='Gaceta Oficial de la Tasa de Interes'),
		'fecha_gaceta_oficial': fields.date('Fecha Publicación', required=True, help='Fecha de publicación de la Gaceta Oficial'),
	
    }

    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]
for_pis_mae_tasas_bcv_prestaciones()

class for_pis_mae_tipos_asignaciones(osv.osv):
    """Tabla Referencial de Tipos de Asignaciones para el Cáculo de Liquidaciones de Facilitadores"""
    _name = 'for.pis.mae_tipos_asignaciones'
    #_rec_name = 'codigo'
    _rec_name = 'tipo_asignacion'

    _columns = {
        'codigo': fields.char('Código', size=3, required=True, help='Código del Tipo de Asignacion'),
        'tipo_asignacion': fields.char('Tipo de Asignacion', size=120, required=True, help='Descripción del Tipo de Asignacion'),

    }

    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]
for_pis_mae_tipos_asignaciones()

class for_pis_mae_tipos_deducciones(osv.osv):
    """Tabla Referencial de Tipos de deducciones para el Cáculo de Liquidaciones de Facilitadores"""
    _name = 'for.pis.mae_tipos_deducciones'
    #_rec_name = 'codigo'
    _rec_name = 'tipo_deduccion'

    _columns = {
        'codigo': fields.char('Código', size=3, required=True, help='Código del Tipo de deduccion'),
        'tipo_deduccion': fields.char('Tipo de deduccion', size=120, required=True, help='Descripción del Tipo de deduccion'),

    }

    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]
for_pis_mae_tipos_deducciones()

class for_pis_mae_motivos_egreso(osv.osv):
    """Tabla Referencial de Motivos de Egreso para el Cáculo de Liquidaciones de Facilitadores"""
    _name = 'for.pis.mae_motivos_egreso'
    #_rec_name = 'codigo'
    _rec_name = 'motivo_egreso'
    
    _columns = {
        'codigo': fields.char('Código', size=3, required=True, help='Código del Motivo de Egreso del Facilitador'),
        'motivo_egreso': fields.char('Motivo de Egreso', size=120, required=True, help='Descripción del Motivo de Egreso del Facilitador'),

    }  
    
    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]
for_pis_mae_motivos_egreso()

class for_pis_mae_modalidades_liquidacion(osv.osv):
    """Tabla Referencial de Modalidades para el Cáculo de Liquidaciones de Facilitadoress (Por Tiempo, o por Horas)"""
    _name = 'for.pis.mae_modalidades_liquidacion'
    #_rec_name = 'codigo'
    _rec_name = 'modalidad_liquidacion'
    
    _columns = {
        'codigo': fields.char('Código', size=3, required=True, help='Código de la Modalidad de Liquidación del Facilitador'),
        'modalidad_liquidacion': fields.char('Modalidad de Liquidación', size=120, required=True, help='Descripción de la Modalidad de Liquidación del Facilitador'),
    }

    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]
for_pis_mae_modalidades_liquidacion()

class sisr_pla_dependencias_administrativas(osv.osv):
    """Registro Maestro de Dependencias Administrativas"""
    _name = 'sisr.pla.dependencias_administrativas'
    #_rec_name = 'codigo'
    _rec_name = 'dependencia_administrativa'
    
    _columns = {
        'codigo': fields.char('Código', size=12, required=True, help='Código de Identificación de la Dependencia Administrativa'),
        'dependencia_administrativa': fields.char('Dependencia', size=120, required=True, help='Nombre o Descripción de la Dependencia Administrativa'),
    }

    _sql_constraints = [('unique_codigo', 'unique(codigo)', 'codigo debe ser un valor unico'),]    
sisr_pla_dependencias_administrativas()

